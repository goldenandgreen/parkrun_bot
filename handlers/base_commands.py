from aiogram import types

import keyboards as kb

from app import dp, bot
from handlers import helpers
from utils import content
from utils import qrcode


@dp.message_handler(commands=['start'])
@dp.throttled(rate=5)
async def send_welcome(message: types.Message):
    kbd = await kb.main(message.from_user.id)
    await message.answer(content.start_message, reply_markup=kbd, disable_notification=True)


@dp.message_handler(regexp='‚ùì —Å–ø—Ä–∞–≤–∫–∞')
@dp.message_handler(commands=['help'])
@dp.throttled(rate=3)
async def commands(message: types.Message):
    # print(await language_code(message))
    await helpers.delete_message(message)
    await message.answer(
        content.help_message,
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=await kb.main(message.from_user.id)
    )


@dp.message_handler(regexp='‚öôÔ∏è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
@dp.message_handler(commands=['register'])
@dp.throttled(rate=2)
async def process_command_settings(message: types.Message):
    await helpers.delete_message(message)
    telegram_id = message.from_user.id
    user = await helpers.find_user_by('telegram_id', telegram_id)
    if not user:
        return await message.answer(content.confirm_registration, reply_markup=kb.inline_agreement, parse_mode='Markdown')
    athlete = await helpers.find_athlete_by('user_id', user['id'])
    if not athlete:
        return await message.answer(content.user_without_athlete)
    await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å: https://s95.ru/athletes/{athlete["id"]}')


@dp.message_handler(regexp='‚ÑπÔ∏è QR-–∫–æ–¥')
@dp.message_handler(commands=['qrcode'])
@dp.throttled(rate=3)
async def process_command_qrcode(message: types.Message):
    await helpers.delete_message(message)
    telegram_id = message.from_user.id
    user = await helpers.find_user_by('telegram_id', telegram_id)
    if not user:
        return await message.answer(content.confirm_registration, reply_markup=kb.inline_agreement, parse_mode='Markdown')

    athlete = await helpers.find_athlete_by('user_id', user['id'])
    if not athlete:
        return await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.')
    code = helpers.athlete_code(athlete)
    with qrcode.generate(code) as pic:
        await bot.send_photo(message.chat.id, pic, caption=f'{athlete["name"]} ({code})')


@dp.message_handler(commands=['statistics'])
@dp.throttled(rate=2)
async def process_command_statistics(message: types.Message):
    await helpers.delete_message(message)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', reply_markup=kb.inline_personal)


# @dp.message_handler(regexp='üìã —Ä–∞–∑–Ω–æ–µ')
# @dp.message_handler(commands=['info'])
# @dp.throttled(rate=2)
# async def process_command_info(message: types.Message):
#     await helpers.delete_message(message)
#     await message.answer('–ö–æ–µ-—á—Ç–æ –µ—â—ë:', reply_markup=kb.inline_info)


@dp.message_handler(commands=['club'])
@dp.throttled(rate=2)
async def process_command_club(message: types.Message):
    await helpers.delete_message(message)
    club = await helpers.find_club(message.from_user.id)
    if not club:
        return await message.answer(content.confirm_registration, reply_markup=kb.inline_agreement, parse_mode='Markdown')
    if not club['club_id']:
        return await message.answer('–ö–ª—É–± –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=kb.set_club)
    await message.answer(content.about_club.format(club['club_name']), reply_markup=kb.change_club,  parse_mode='Markdown')


@dp.message_handler(commands=['home'])
@dp.throttled(rate=2)
async def process_command_home(message: types.Message):
    await helpers.delete_message(message)
    event = await helpers.find_home_event(message.from_user.id)
    if not event:
        return await message.answer(content.confirm_registration, reply_markup=kb.inline_agreement, parse_mode='Markdown')
    if not event['event_id']:
        return await message.answer('–î–æ–º–∞—à–Ω–∏–π –∑–∞–±–µ–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=kb.set_home_event)
    await message.answer(
        content.about_home_event.format(event['event_name']),
        reply_markup=kb.change_home_event,
        parse_mode='Markdown'
    )
